{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/summiya894/20sw121_20sw129_University_Management_System_Project/blob/main/Lab_2_DS%26A.ipynb20sw129\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task_1"
      ],
      "metadata": {
        "id": "-TVEG-4-xJ3V"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TxTomQBbxFre",
        "outputId": "26aeabea-5da9-40cf-c02e-24fec83f0eea"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter Your Points:200\n",
            "Prize:Penguin\n"
          ]
        }
      ],
      "source": [
        "\n",
        "points=int(input(\"Enter Your Points:\"));\n",
        "\n",
        "if  points>=1 and points<=50:\n",
        "  print(\"Prize:Wooden Rabbit\");\n",
        "\n",
        "elif points >=51 and points<=150:\n",
        "  print(\"Prize:No Prize\");\n",
        "elif points >=151 and points<=180:\n",
        "  print(\"Prize:Water Thin Mint\");\n",
        "elif points >=181 and points<=200:\n",
        "  print(\"Prize:Penguin\");\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "task 2"
      ],
      "metadata": {
        "id": "XRVV2qqYyTqn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "answer=5;\n",
        "\n",
        "guess=int(input(\"Enter You guess\"));\n",
        "\n",
        "if guess < answer:\n",
        "    print(\"Your guess is too low.\")\n",
        "elif guess > answer:\n",
        "    print(\"Your guess is too high.\")\n",
        "else:\n",
        "    print(\"Congratulations! Your guess is correct.\")\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VHbIHZxgxJI2",
        "outputId": "dbc36496-58ad-4b39-c4c7-58cec62109ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter You guess3\n",
            "Your guess is too low.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "task 3"
      ],
      "metadata": {
        "id": "Kg7VR2uxz2r7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_tax(amount, state):\n",
        "    # Define the tax rates for each state\n",
        "    tax_rates = {\n",
        "        'CA': 0.075,\n",
        "        'MN': 0.095,\n",
        "        'NY': 0.089\n",
        "    }\n",
        "\n",
        "    # Check if the state is in the tax_rates dictionary\n",
        "    if state in tax_rates:\n",
        "        tax_rate = tax_rates[state]\n",
        "        tax_amount = amount * tax_rate\n",
        "        total_amount = amount + tax_amount\n",
        "        return total_amount\n",
        "    else:\n",
        "        print(\"Invalid state code. Cannot calculate tax.\")\n",
        "        return None\n",
        "\n",
        "# Test the function\n",
        "purchase_amount = float(input(\"Enter the purchase amount: \"))\n",
        "state_code = input(\"Enter the state code (CA, MN, or NY): \")\n",
        "\n",
        "total_amount_with_tax = calculate_tax(purchase_amount, state_code)\n",
        "if total_amount_with_tax is not None:\n",
        "    print(f\"Total amount with tax: ${total_amount_with_tax:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XwQIC1dez17V",
        "outputId": "c5a90bb2-5f9b-45af-de67-268e5cd442f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the purchase amount: 34\n",
            "Enter the state code (CA, MN, or NY): MN\n",
            "Total amount with tax: $37.23\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "task 4"
      ],
      "metadata": {
        "id": "XCjqNTvT0cGd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sentence = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\",\n",
        "\"lazy\", \"dog\"]\n",
        "\n",
        "for element in sentence:\n",
        "    print(element);\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J9rBYcMG0dFs",
        "outputId": "ad1a8dcc-c710-4bda-dd41-33610de3274f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the\n",
            "quick\n",
            "brown\n",
            "fox\n",
            "jumped\n",
            "over\n",
            "the\n",
            "lazy\n",
            "dog\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 5"
      ],
      "metadata": {
        "id": "6o_tIek30mrw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "number_list = list(range(1, 31))\n",
        "\n",
        "\n",
        "multiples_of_5 = [num for num in number_list if num % 5 == 0 ]\n",
        "\n",
        "# Display the multiples of 5\n",
        "\n",
        "print(multiples_of_5);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AsupyJGO0oyV",
        "outputId": "f2d14e14-37f3-4269-f7ad-287bb9e92131"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 10, 15, 20, 25, 30]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 6"
      ],
      "metadata": {
        "id": "l7e_eLlJ170K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "names = [ \"Nayab Nisaar\", \"Faiz Nadeem\", \"Tom and Jerry\", \"Nimra Ahmed\"]\n",
        "first_names = [name.split()[0].lower() for name in names]\n",
        "print(first_names)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9vUcHrz22CSJ",
        "outputId": "13935812-73a2-4dee-afe0-11f1005ace8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['nayab', 'faiz', 'tom', 'nimra']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 7"
      ],
      "metadata": {
        "id": "S8xgMsRy19ZY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "multiples_3 = [num * 3 for num in range(1, 21)]\n",
        "print(multiples_3)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FzEQvW-b2LHI",
        "outputId": "fa62127f-8e22-4ee4-a7d8-e96b97ceea30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 8"
      ],
      "metadata": {
        "id": "FnepyIvw1-sq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "scores = {\n",
        "    \"Shifa\": 70,\n",
        "    \"Sualeha\": 35,\n",
        "    \"Nayab\": 82,\n",
        "    \"Nisar\": 93,\n",
        "    \"Faiz\": 98\n",
        "}\n",
        "\n",
        "passed = [name if score >= 65 else name + \" (Failed)\" for name, score in scores.items()]\n",
        "print(passed);"
      ],
      "metadata": {
        "id": "8OdBzO4P2OCU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a0895e75-25fe-48f6-f982-c50228dd79dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Shifa', 'Sualeha (Failed)', 'Nayab', 'Nisar', 'Faiz']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 9"
      ],
      "metadata": {
        "id": "G9Zswt7H1_vr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cast_names = [\"Arbab\", \"Sheikh\", \"Rajput\", \"Memon\", \"Arain\"]\n",
        "cast_heights = [72, 68, 72, 66, 76]\n",
        "\n",
        "cast = dict(zip(cast_names, cast_heights))\n",
        "print(cast)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wm8PMxkZ2M79",
        "outputId": "72d6bd45-17f0-4af5-cfe6-7d8b0d71bf91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Arbab': 72, 'Sheikh': 68, 'Rajput': 72, 'Memon': 66, 'Arain': 76}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 10"
      ],
      "metadata": {
        "id": "dx5uz4kC2BCC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cast = [\"Kamboh\", \"Sheikh\", \"Rajput\", \"Memon\", \"Arain\"]\n",
        "heights = [72, 68, 72, 66, 76]\n",
        "\n",
        "for index, name in enumerate(cast):\n",
        "    cast[index] = name + str(heights[index])\n",
        "\n",
        "print(cast)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eonH8taQ2CdV",
        "outputId": "fc88e967-5c43-485f-be7f-29feac1551b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Kamboh72', 'Sheikh68', 'Rajput72', 'Memon66', 'Arain76']\n"
          ]
        }
      ]
    }
  ]
}