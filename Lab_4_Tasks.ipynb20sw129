{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/summiya894/20sw121_20sw129_University_Management_System_Project/blob/main/Lab_4_Tasks.ipynb20sw129\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 1"
      ],
      "metadata": {
        "id": "dKx0ts83LDHn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "X = np.arange(2, 33, 2).reshape(4, 4)\n",
        "print(X)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_rnpVHswLC7H",
        "outputId": "0a801177-e559-40f3-e324-7293fde6c54d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 2  4  6  8]\n",
            " [10 12 14 16]\n",
            " [18 20 22 24]\n",
            " [26 28 30 32]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 2"
      ],
      "metadata": {
        "id": "Vf4NDGqdLGb_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "X = np.arange(1, 26).reshape(5, 5)\n",
        "\n",
        "Y = X[X % 2 != 0]\n",
        "\n",
        "print(\"Original Array:\")\n",
        "print(X)\n",
        "print(\"\\nArray with Odd Numbers:\")\n",
        "print(Y)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gpWo71P2LIAj",
        "outputId": "7b45ead2-9526-4742-e2ec-02c9e0725ff4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Array:\n",
            "[[ 1  2  3  4  5]\n",
            " [ 6  7  8  9 10]\n",
            " [11 12 13 14 15]\n",
            " [16 17 18 19 20]\n",
            " [21 22 23 24 25]]\n",
            "\n",
            "Array with Odd Numbers:\n",
            "[ 1  3  5  7  9 11 13 15 17 19 21 23 25]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 3"
      ],
      "metadata": {
        "id": "zzxWcfq_LIcz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "X = np.arange(1, 5).reshape(4, 1) * np.ones((1, 4))\n",
        "\n",
        "print(X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w_2lvcSPLJNY",
        "outputId": "c3050e5f-e51b-482c-e281-69df922f505e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 1. 1. 1.]\n",
            " [2. 2. 2. 2.]\n",
            " [3. 3. 3. 3.]\n",
            " [4. 4. 4. 4.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 4"
      ],
      "metadata": {
        "id": "sjjwGlcOLJlk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/NumPy.ipynb')\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "# Create a 1000x20 ndarray with random integers in the range [0, 5001)\n",
        "X = np.random.randint(0, 5001, size=(1000, 20))\n",
        "# Print the shape of X\n",
        "print(X.shape)\n",
        "\n",
        "# Calculate the average of the values in each column of X\n",
        "ave_cols = np.mean(X, axis=0)\n",
        "\n",
        "# Calculate the standard deviation of the values in each column of X\n",
        "std_cols = np.std(X, axis=0)\n",
        "\n",
        "\n",
        "print(\"Shape of ave_cols:\", ave_cols.shape)\n",
        "print(\"Shape of std_cols:\", std_cols.shape)\n",
        "\n",
        "# Mean normalize X\n",
        "X_norm = (X - ave_cols) / std_cols\n",
        "\n",
        "print(\"Mean normalized X:\")\n",
        "print(X_norm)\n",
        "\n",
        "# Print the average of all the values of X_norm\n",
        "ave_all_values = np.mean(X_norm)\n",
        "print(\"Average of all values in X_norm:\", ave_all_values)\n",
        "\n",
        "# Print the average of the minimum value in each column of X_norm\n",
        "ave_min_values = np.mean(np.min(X_norm, axis=0))\n",
        "print(\"Average of minimum values in each column of X_norm:\", ave_min_values)\n",
        "\n",
        "# Print the average of the maximum value in each column of X_norm\n",
        "ave_max_values = np.mean(np.max(X_norm, axis=0))\n",
        "print(\"Average of maximum values in each column of X_norm:\", ave_max_values)\n",
        "\n",
        "# We create a random permutation of integers 0 to 4\n",
        "np.random.permutation(5)\n",
        "\n",
        "# Create a random permutation of row indices of X_norm\n",
        "row_indices = np.random.permutation(X_norm.shape[0])\n",
        "\n",
        "print(\"Random permutation of row indices:\", row_indices)\n",
        "\n",
        "# Define the ratios for training, cross-validation, and test sets\n",
        "train_ratio = 0.6\n",
        "cross_val_ratio = 0.2\n",
        "test_ratio = 0.2\n",
        "\n",
        "# Calculate the sizes of each set based on the ratios\n",
        "num_rows = X_norm.shape[0]\n",
        "num_train = int(train_ratio * num_rows)\n",
        "num_cross_val = int(cross_val_ratio * num_rows)\n",
        "num_test = int(test_ratio * num_rows)\n",
        "\n",
        "# Use row_indices to split the data into sets\n",
        "X_train = X_norm[row_indices[:num_train]]\n",
        "X_crossVal = X_norm[row_indices[num_train:num_train + num_cross_val]]\n",
        "X_test = X_norm[row_indices[num_train + num_cross_val:]]\n",
        "\n",
        "print(\"X_train shape:\", X_train.shape)\n",
        "print(\"X_crossVal shape:\", X_crossVal.shape)\n",
        "print(\"X_test shape:\", X_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qom8488pLKWx",
        "outputId": "753b0cbe-2469-448e-b2dc-fbbceeea0829"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /NumPy.ipynb; to attempt to forcibly remount, call drive.mount(\"/NumPy.ipynb\", force_remount=True).\n",
            "(1000, 20)\n",
            "Shape of ave_cols: (20,)\n",
            "Shape of std_cols: (20,)\n",
            "Mean normalized X:\n",
            "[[ 0.63117849 -0.43409972  0.49098923 ...  0.87706377 -0.72380162\n",
            "   0.98355856]\n",
            " [-0.12852262 -1.15204595 -1.22360406 ...  1.38048682 -1.67423155\n",
            "   0.61988934]\n",
            " [ 0.93656873  0.92716502  1.44306774 ...  0.51124757 -0.07225781\n",
            "  -0.78450752]\n",
            " ...\n",
            " [ 1.68254444 -1.37592908  0.30284545 ... -0.57598273  0.03319033\n",
            "  -0.42910351]\n",
            " [-0.58351977 -1.70069783  0.33905426 ... -1.42887266  1.36211623\n",
            "  -1.10478439]\n",
            " [-1.21831971 -1.6827319  -0.26229585 ... -0.31848082 -0.88581466\n",
            "  -1.46569855]]\n",
            "Average of all values in X_norm: -4.476419235288631e-17\n",
            "Average of minimum values in each column of X_norm: -1.7158648508206162\n",
            "Average of maximum values in each column of X_norm: 1.743836773381244\n",
            "Random permutation of row indices: [418 677 482 689 965 630 489  96 763 962 473 741  97 124 725 842 801 367\n",
            " 250 125  82 352 542 454  76 503 803 839 896 427 428  50 478 214 968 860\n",
            " 582 543 159 365 623 928 605 216 594 856 894 746 100 611 848 196 405 321\n",
            " 183 129 688  70 678 304 952 314 425  61 827 932 971 874 596 306 507 739\n",
            " 258 999 990 975 724 945 953 350 445 506  39 436 612 683 201 383  73 775\n",
            " 483  52 821 459 861 162 675 798 622 653 410  44 300 635 247 419 161 138\n",
            " 251 854 610 421 303 742  40 586  95   5  67   0 670  60 335 354 439 706\n",
            " 305 181 353 560 830 681 765 397 977 937 777 879 345  63 607 951 671 674\n",
            " 936 145 171 740 485 356 242 870 961 585 998 943 131 438 207 959 530 947\n",
            " 157 927 496 718 249 903 217 974 550 840 502 262 637 406 772 422 467 402\n",
            " 194 547   9 922 964 561 384 913 751 270 628  78 333 189 567 152 715 466\n",
            " 532 883 265 934 294 210 380  64 957 470 726 575 423 391  29 705 619 539\n",
            " 636 761 108  42 462 859 930 296 676 920  81 570 245 908 348 444 519  34\n",
            " 206 323 230 754 565 545 841 212 172 650 825 770 606 337 807 624 783 558\n",
            " 461 556 420 737 865 240 649 562 271 287 996 805 884 572 308 978 919 829\n",
            " 146  14 851 366  17 905 144 263 368 690 453 755 773 796 759 652 958 604\n",
            " 319 257 522 899 458 260 486 407 173 469 877 170 799 109 776 440 396 679\n",
            " 687 248 833 734 657 102 141 661 456 615 264  25 460 119 764 164 254 544\n",
            " 295  13 766 200 795 226 220 559 369 398  83 432 531 115 363 992  90 750\n",
            " 435 949 215 346 744 812 187 261 135 199  43 233 794 910 815 280 231 446\n",
            "  48 457 223 500 344 555 158 361 577 729 811 569 902 259  20 658 976 113\n",
            " 241 730 926 898  16 169  91 808 437 291 568 591 316 668  93 852 584 393\n",
            " 515 915 184  84 557 907 790 832  68 510 269 464 404  27 708 218 362 716\n",
            " 618 601 673 178 452 282 573 455 824 526 644 106 696 642   4 692 810 640\n",
            " 279 579 645 186 967  77 552 387 431 165 213 847 917 872 995 244 733 520\n",
            " 289  11 925 599 434  98 732 315 298 921 819 914 540 595 413 614 769 634\n",
            " 111  49 538 156 357 970  57  72 281 415 325 875  45 351 546  37 476 188\n",
            " 886 376 643 682 846 537 450 382 551 283 939 785 105  31 666  74 272 209\n",
            " 684 424 817 400 426 868 747 888 342  94 116  26 277 760 234 324 142 479\n",
            " 788  30 916 736 857 580 748 918 185  79 276 317 408 374 960 498 548 804\n",
            " 266 986 246  15 126 175 882 710 576 880  18 341 284 836 791 792 816 581\n",
            " 123 966 253 286 475  58 993 699 110 541 484 148 771   6 704 931 867 508\n",
            " 589 528 834 663 987 525 235 311 381 375 935 989 963 954 904 723 587 191\n",
            "  92 853 313 524 516 693 370 680 480 302 292 893 717 237 813  75 571 211\n",
            " 603 139 564 349 722 205 127  54 417 981 731 988 197 495 946 843 980 806\n",
            " 844 691 891 514 672 390 745 929 897   1 973 232  35 499 332 122 443 887\n",
            " 130 797  24  33 273 629 527 749  41 933 501 208 735 752 707 221 757 378\n",
            " 523 621 128 509  32 627 885 802 521 814 784 481 512 800 174  21 727 140\n",
            " 195 494 588 720 331 288 134 147  65 143 578 639 336 297 320 256  23  12\n",
            " 203 656 150 632 167 991 651 451 787 447 202 355 626 583   2 997 793 950\n",
            " 881 229 517 923 849 912 659 449 549  51 985 979 873 192 590 385  99 850\n",
            " 779 948 608 616 204 664 160 620 609 823 377 371 463 429 267 593 837 956\n",
            " 154 275 709 592 598 359 198 121 104  19 497 667 982 364 845 340 858 219\n",
            " 889  28 252 866 901 809 177 743  66 613 326 155 818  36 694 334 117 163\n",
            " 738 756 268 714 114 835 728 103 534 120 638 820 701 347 828 762 719  55\n",
            "  56 900  69 301 655  46 994 654 721  88 855 472 878 228 753 909 225 535\n",
            " 107 318 984 379 330 395 876 633 166  86 906 372 358 322 465 778 327 602\n",
            " 490 554 533 826 477 136 647 660 328 665 236 574 118 193 782  47 700 780\n",
            " 892 941 831  71 411  62 669 646   8 312 112 386 310 290 414 712 239 767\n",
            " 969 403 758 488 625 768 307 504  80 713 566 869 153 487 392 641 491 227\n",
            "  89 703 911 871 243 339 416  53 401 944 972 373 149 631 493   7 176 686\n",
            " 702 518 505 151  38 394  22 890 513 940 133 471 338 293 698 309 238 474\n",
            " 924 983 343 360 179 553 600 822 274   3 388 563 389 222 597 182 711 412\n",
            " 468 441 695 399  59 278 529 409 442 955 697 285 863 536 781 895 942  10\n",
            " 864 137  87 433 190 255  85 838 430 101 168 617 938 685 774 448 511 329\n",
            " 180 132 492 662 789 786 299 648 862 224]\n",
            "X_train shape: (600, 20)\n",
            "X_crossVal shape: (200, 20)\n",
            "X_test shape: (200, 20)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ALnmdD2QSutP",
        "outputId": "7acde086-ccc8-4550-cdf7-5fa4b851f5c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1000, 20)\n"
          ]
        }
      ]
    }
  ]
}