{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/summiya894/20sw121_20sw129_University_Management_System_Project/blob/main/Lab_3_DS%26A.ipynb20sw129\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task_1"
      ],
      "metadata": {
        "id": "nLlT3X85rfE9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "population=int(input(\"Enter the Population:\"));\n",
        "land_area=int(input(\"Enter the Land_Area:\"));\n",
        "\n",
        "def  population_density(population,land_area):\n",
        "  return print(\"POpulation_Density:\",population/land_area);\n",
        "\n",
        "\n",
        "population_density(population,land_area);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VSv8lhYErvH4",
        "outputId": "cbcb68af-14e4-444c-ce70-91a692226f03"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the Population:10\n",
            "Enter the Land_Area:1\n",
            "Density: 10.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 2"
      ],
      "metadata": {
        "id": "Z9oZQ33WriX4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def readable_timedelta(days):\n",
        "\n",
        "  weeks=days//7;\n",
        "  remaining_days=days%7;\n",
        "  return print(weeks,\" weeks\", remaining_days,\"days\");\n",
        "readable_timedelta(10);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PZNhrJEptRMW",
        "outputId": "66fe2454-b3be-4351-c778-4bc6e840bd9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1  weeks 3 days\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "task3"
      ],
      "metadata": {
        "id": "VWKpq9P7rjLb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numbers = [\n",
        "    [34, 63, 88, 71, 29],\n",
        "    [90, 78, 51, 27, 45],\n",
        "    [63, 37, 85, 46, 22],\n",
        "    [51, 22, 34, 11, 18]\n",
        "]\n",
        "\n",
        "averages = list(map(lambda numbers3: sum(numbers3) / len(numbers3), numbers))\n",
        "print(averages)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AoVPQPv0ubWG",
        "outputId": "80f395e4-af86-4cd6-d999-00f3fb4f7595"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[57.0, 58.2, 50.6, 27.2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "task4"
      ],
      "metadata": {
        "id": "efXIJ9LNrkUG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sKasFLr0rQMa",
        "outputId": "50b5e91f-16cd-4719-8741-1c9b6ed6f65a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Chicago', 'Denver', 'Boston']\n"
          ]
        }
      ],
      "source": [
        "cities = [\"New York City\", \"Los Angeles\", \"Chicago\", \"Mountain View\", \"Denver\", \"Boston\"]\n",
        "\n",
        "short_cities = list(filter(lambda name: len(name) < 10, cities))\n",
        "print(short_cities)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "task5"
      ],
      "metadata": {
        "id": "gfJBOAOp2y0p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "names_input = input(\"Enter a list of names separated by spaces: \")\n",
        "names = names_input.split()\n",
        "\n",
        "assignments_input = input(\"Enter a list of the number of assignments separated by spaces: \")\n",
        "assignments = list(map(int, assignments_input.split()))\n",
        "\n",
        "grades_input = input(\"Enter a list of grades separated by spaces: \")\n",
        "grades = list(map(float, grades_input.split()))\n",
        "\n",
        "message = \"Hi {},\\n\\nThis is a reminder that you have {} assignments left to submit before you can graduate. Your current grade is {} and can increase to {} if you submit all assignments before the due date.\\n\\n\"\n",
        "\n",
        "# Write a for loop that iterates through each set of names, assignments, and grades to print each student's message\n",
        "for name, assignment_count, grade in zip(names, assignments, grades):\n",
        "    potential_grade = grade + 2 * assignment_count\n",
        "    print(message.format(name, assignment_count, grade, potential_grade))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mpMBIyunrehu",
        "outputId": "97f2a021-d750-4bfc-e6df-b55653191b0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a list of names separated by spaces: N A F\n",
            "Enter a list of the number of assignments separated by spaces:  4 4 4\n",
            "Enter a list of grades separated by spaces:  8 5 8\n",
            "Hi N,\n",
            "\n",
            "This is a reminder that you have 4 assignments left to submit before you can graduate. Your current grade is 8.0 and can increase to 16.0 if you submit all assignments before the due date.\n",
            "\n",
            "\n",
            "Hi A,\n",
            "\n",
            "This is a reminder that you have 4 assignments left to submit before you can graduate. Your current grade is 5.0 and can increase to 13.0 if you submit all assignments before the due date.\n",
            "\n",
            "\n",
            "Hi F,\n",
            "\n",
            "This is a reminder that you have 4 assignments left to submit before you can graduate. Your current grade is 8.0 and can increase to 16.0 if you submit all assignments before the due date.\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "task 6\n"
      ],
      "metadata": {
        "id": "4UspGDHQ3H0z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "file_content = \"\"\"We're the knights of the round table\n",
        "We dance whenever we're able\"\"\"\n",
        "with open(\"camelot.txt\", \"w\") as f:\n",
        "    f.write(file_content)\n",
        "\n",
        "with open(\"camelot.txt\", \"r\") as f:\n",
        "    first_10_chars = f.read(2)\n",
        "    print(\"First 2 characters:\")\n",
        "    print(first_10_chars)\n",
        "\n",
        "    next_15_chars = f.read(8)\n",
        "    print(\"\\nNext 8 characters:\")\n",
        "    print(next_15_chars)\n",
        "\n",
        "    rest_of_the_file = f.read()\n",
        "    print(\"\\nRest of the file:\")\n",
        "    print(rest_of_the_file)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9vyX7-eO3Jse",
        "outputId": "5df5cd6d-3dc5-44d0-8e70-07edd25db206"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First 2 characters:\n",
            "We\n",
            "\n",
            "Next 8 characters:\n",
            "'re the \n",
            "\n",
            "Rest of the file:\n",
            "knights of the round table\n",
            "We dance whenever we're able\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "task 7\n"
      ],
      "metadata": {
        "id": "tMKbVvde3OPJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def create_cast_list(filename):\n",
        "    cast_list = []\n",
        "    # Use 'with' to open the file\n",
        "    with open(filename, 'r') as file:\n",
        "        # Use the for loop syntax to process each line\n",
        "        for line in file:\n",
        "            # Split the line using the comma as the delimiter\n",
        "            data = line.strip().split(',')\n",
        "            # If there is a comma, append the data before the comma to cast_list\n",
        "            if len(data) > 0:\n",
        "                cast_list.append(data[0])\n",
        "\n",
        "    return cast_list\n",
        "\n",
        "cast_list = create_cast_list('/content/actors.txt')\n",
        "for actor in cast_list:\n",
        "    print(actor)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1t29MSMc-ACx",
        "outputId": "893326cf-1f26-4784-bc35-293eaa75f865"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Graham Chapman\n",
            "Eric Idle\n",
            "Terry Jones\n",
            "Michael Palin\n",
            "Terry Gilliam\n",
            "John Cleese\n",
            "Carol Cleveland\n",
            "Ian Davidson\n",
            "John Hughman\n",
            "The Fred Tomlinson Singers\n",
            "Connie Booth\n",
            "Bob Raymond\n",
            "Lyn Ashley\n",
            "Rita Davies\n",
            "Stanley Mason\n",
            "David Ballantyne\n",
            "Donna Reading\n",
            "Peter Brett\n",
            "Maureen Flanagan\n",
            "Katya Wyeth\n",
            "Frank Lester\n",
            "Neil Innes\n",
            "Dick Vosburgh\n",
            "Sandra Richards\n",
            "Julia Breck\n",
            "Nicki Howorth\n",
            "Jimmy Hill\n",
            "Barry Cryer\n",
            "Jeannette Wild\n",
            "Marjorie Wilde\n",
            "Marie Anderson\n",
            "Caron Gardner\n",
            "Nosher Powell\n",
            "Carolae Donoghue\n",
            "Vincent Wong\n",
            "Helena Clayton\n",
            "Nigel Jones\n",
            "Roy Gunson\n",
            "Daphne Davey\n",
            "Stenson Falke\n",
            "Alexander Curry\n",
            "Frank Williams\n",
            "Ralph Wood\n",
            "Rosalind Bailey\n",
            "Marion Mould\n",
            "Sheila Sands\n",
            "Richard Baker\n",
            "Douglas Adams\n",
            "Ewa Aulin\n",
            "Reginald Bosanquet\n",
            "Barbara Lindley\n",
            "Roy Brent\n",
            "Jonas Card\n",
            "Tony Christopher\n",
            "Beulah Hughes\n",
            "Peter Kodak\n",
            "Lulu\n",
            "Jay Neill\n",
            "Graham Skidmore\n",
            "Ringo Starr\n",
            "Fred Tomlinson\n",
            "David Hamilton\n",
            "Suzy Mandel\n",
            "Peter Woods\n"
          ]
        }
      ]
    }
  ]
}